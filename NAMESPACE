# Generated by roxygen2: do not edit by hand

S3method(estimateLogicle,GatingHierarchy)
S3method(subset,GatingSet)
export("flowData<-")
export(.getNodeInd)
export(GatingSetList)
export(asinh_Gml2)
export(asinhtGml2_trans)
export(booleanFilter)
export(char2booleanFilter)
export(checkRedundantNodes)
export(dropRedundantChannels)
export(dropRedundantNodes)
export(flowData)
export(flowJo.fasinh)
export(flowJo.flog)
export(flowJo.fsinh)
export(flowJoTrans)
export(flowJo_biexp_trans)
export(flowJo_fasinh_trans)
export(flowWorkspace.par.get)
export(flowWorkspace.par.set)
export(flow_breaks)
export(flow_trans)
export(getChildren)
export(getCompensationMatrices)
export(getData)
export(getGate)
export(getIndiceMat)
export(getMergedStats)
export(getNodes)
export(getParent)
export(getPopStats)
export(getProp)
export(getSingleCellExpression)
export(getSingleCellExpressionByGate)
export(getTotal)
export(getTransformations)
export(groupByChannels)
export(groupByTree)
export(insertGate)
export(load_gs)
export(load_gslist)
export(logicleGml2_trans)
export(logicle_trans)
export(logtGml2_trans)
export(mkformula)
export(moveNode)
export(openWorkspace)
export(parseWorkspace)
export(plotGate)
export(plotPopCV)
export(prettyAxis)
export(save_gs)
export(save_gslist)
export(set.count.xml)
export(setGate)
export(setNode)
export(summary)
export(transformerList)
export(updateChannels)
exportClasses(GatingHierarchy)
exportClasses(GatingSet)
exportClasses(GatingSetList)
exportClasses(booleanFilter)
exportMethods("[")
exportMethods("[[")
exportMethods("colnames<-")
exportMethods("flowData<-")
exportMethods("markernames<-")
exportMethods("pData<-")
exportMethods("sampleNames<-")
exportMethods(GatingSet)
exportMethods(Rm)
exportMethods(add)
exportMethods(clone)
exportMethods(colnames)
exportMethods(compensate)
exportMethods(filterObject)
exportMethods(flowData)
exportMethods(getChildren)
exportMethods(getCompensationMatrices)
exportMethods(getData)
exportMethods(getGate)
exportMethods(getIndices)
exportMethods(getNodes)
exportMethods(getParent)
exportMethods(getPopStats)
exportMethods(getProp)
exportMethods(getSingleCellExpression)
exportMethods(getTotal)
exportMethods(keyword)
exportMethods(lapply)
exportMethods(length)
exportMethods(markernames)
exportMethods(pData)
exportMethods(plot)
exportMethods(plotGate)
exportMethods(plotPopCV)
exportMethods(rbind2)
exportMethods(recompute)
exportMethods(sampleNames)
exportMethods(setGate)
exportMethods(setNode)
exportMethods(show)
exportMethods(transform)
import(data.table)
importClassesFrom(flowCore,cytoSet)
importClassesFrom(graph,graphNEL)
importClassesFrom(methods,ANY)
importClassesFrom(methods,character)
importClassesFrom(methods,data.frame)
importClassesFrom(methods,environment)
importClassesFrom(methods,list)
importClassesFrom(methods,logical)
importClassesFrom(methods,matrix)
importClassesFrom(methods,missing)
importClassesFrom(methods,numeric)
importClassesFrom(methods,oldClass)
importFrom(Biobase,"pData<-")
importFrom(Biobase,description)
importFrom(Biobase,exprs)
importFrom(Biobase,pData)
importFrom(Biobase,sampleNames)
importFrom(BiocGenerics,duplicated)
importFrom(RColorBrewer,brewer.pal)
importFrom(Rcpp,evalCpp)
importFrom(Rgraphviz,agread)
importFrom(dplyr,bind_rows)
importFrom(dplyr,inner_join)
importFrom(dplyr,mutate)
importFrom(flowCore,"colnames<-")
importFrom(graph,"edgeRenderInfo<-")
importFrom(graph,"nodeRenderInfo<-")
importFrom(graph,addEdge)
importFrom(graph,graphNEL)
importFrom(gridExtra,arrangeGrob)
importFrom(lattice,barchart)
importFrom(latticeExtra,ggplot2like)
importFrom(ncdfFlow,"colnames<-")
importFrom(scales,format_format)
importFrom(scales,trans_new)
importFrom(stats4,plot)
importMethodsFrom(Biobase,"sampleNames<-")
importMethodsFrom(Rgraphviz,AgEdge)
importMethodsFrom(Rgraphviz,AgNode)
importMethodsFrom(Rgraphviz,name)
importMethodsFrom(Rgraphviz,nodeData)
importMethodsFrom(Rgraphviz,nodeDataDefaults)
importMethodsFrom(Rgraphviz,renderGraph)
importMethodsFrom(flowViz,densityplot)
importMethodsFrom(flowViz,xyplot)
importMethodsFrom(graph,"edgeData<-")
importMethodsFrom(graph,"edgeDataDefaults<-")
importMethodsFrom(graph,"nodeData<-")
importMethodsFrom(graph,"nodeDataDefaults<-")
importMethodsFrom(graph,addEdge)
importMethodsFrom(graph,addNode)
importMethodsFrom(graph,edgeData)
importMethodsFrom(graph,edges)
importMethodsFrom(graph,inEdges)
importMethodsFrom(graph,nodeData)
importMethodsFrom(graph,removeNode)
importMethodsFrom(graph,subGraph)
importMethodsFrom(methods,coerce)
importMethodsFrom(methods,show)
useDynLib(flowWorkspace,.registration = TRUE)
